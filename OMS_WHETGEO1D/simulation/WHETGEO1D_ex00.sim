/*
 * WHETGEO-1D ex00
 * 
 * Author: NiccolÃ² Tubini and Riccardo Rigon
 */
import static oms3.SimBuilder.instance as OMS3
import static oms3.SimBuilder.*
def home = oms_prj



def richardsGridFileName = "$oms_prj//data/Grid_NetCDF/ex00_GSS2021.nc"

def typeClosureEquation = "{Van Genuchten}" 

def typeEquationState = "{Van Genuchten}"

def typeUHCModel = "{Mualem Van Genuchten}" //conducibilita idraulica insatura
//UHC = unsaturated hydraulyc conductivity - parametrizzazione che dipende dal modello di SWRC + modello sui pori

def typeUHCTemperatureModel = "notemperature" //includere effetto temperatura nel modello
//modifica viscosita dell'acqua 
//in questa simulazione specifica non consideriamo il suo effetto, mentre un'altra simulazione si
//la temperatura è un parametro (si può assegnare un profilo) costante nel tempo

def interfaceHydraulicConductivityModel = "max"
//come valutare la conducibilità idraulica a interfaccia
//ogni volume di controllo seguita da indice i
//la UHC si calcola per Ki; Ki-1; k1+q; il flusso deve essere valutato tra i due vol di controllo
// k*gradiente (phi + z) -> problema: quale K bisogna utilizzare -> a partire dai due valori si calcola un K rappresentativo
// in questa simulazione abbiamo scelto di prendere il valore massimo tra i due per calcolare il flusso del volume di controloo
// OPPURE media aritmetica
// OPPURe media armonica in cui i due valori vengono combinati

def topBCType = "Top Dirichlet" //in superficie
// nello schema al fondo e all'interfaccia acqua suolo P=Ph2o

def bottomBCType = "Bottom free drainage" //al fondo si assume che il gradiente delle suizioni sia zero 
//acqua che si muove per gravità (z) e per suzione

def stationID = "0"
//valore che compare nel file della serie temporale - ex00_water_ponding.csv

def startDate= "2020-01-01 00:00"

def endDate="2020-01-02 00:00"

def tTimestep = 1

def topBCFileName = "$oms_prj//data/Timeseries/ex00_water_ponding.csv"

def bottomBCFileName = "$oms_prj//data/Timeseries/ex00_free_drainage.csv"

def saveDatesFileName = "$oms_prj//data/Timeseries/ex00_save_dates.csv"

def outputFileName = "$oms_prj//output/emma.nc"


def writeFrequency = 10000 //n di timestep = frequenza in cui vengono salvati i file di output
// meglio ridurre numero di accessi al disco - lettura di file di output e scrittura - mantenendo questo valore alto


solver = OMS3.sim(name: "Integrate PDE", {

resource "$oms_prj/dist"

	model(while : "reader_data_topBC.doProcess"  ){

		components {
			
			// reads of the grid.nc file
			"readNetCDF" "it.geoframe.blogpsot.netcdf.monodimensionalproblemtimedependent.ReadNetCDFRichardsGrid1D"
			
			// solve Richards' equation
			"solver" "it.geoframe.blogspot.whetgeo1d.richardssolver.RichardsSolver1DMain"
			
			// time-series reader
			"reader_data_topBC"         "org.hortonmachine.gears.io.timedependent.OmsTimeSeriesIteratorReader"
			"reader_data_bottomBC"      "org.hortonmachine.gears.io.timedependent.OmsTimeSeriesIteratorReader"
			"reader_data_save_dates"    "org.hortonmachine.gears.io.timedependent.OmsTimeSeriesIteratorReader"
			
			// this component stores solver's output during the simulation
			"buffer" "it.geoframe.blogspot.buffer.buffertowriter.RichardsBuffer1D"
			
			// output writer in a NetCDF format
			"writeNetCDF" "it.geoframe.blogpsot.netcdf.monodimensionalproblemtimedependent.WriteNetCDFRichards1DDouble"
		
		}
		
		parameter {

			"readNetCDF.richardsGridFilename" "${richardsGridFileName}"


			"solver.typeClosureEquation" "${typeClosureEquation}"
			

			"solver.typeEquationState" "${typeEquationState}"


			"solver.typeUHCModel" "${typeUHCModel}"


			"solver.typeUHCTemperatureModel" "${typeUHCTemperatureModel}"

            
			"solver.interfaceHydraulicConductivityModel" "${interfaceHydraulicConductivityModel}"
						

			"solver.topBCType"  "${topBCType}"

            
			"solver.bottomBCType"  "${bottomBCType}"

            
			"solver.stationID"  "${stationID}"
			

			"solver.newtonTolerance" "0.00000000001"


			"solver.nestedNewton" "1"
			
			"solver.picardIteration" "2"


			"solver.tTimeStep" tTimestep*60


			"solver.timeDelta" tTimestep*60

			"reader_data_topBC.file"             "${topBCFileName}"
			"reader_data_topBC.idfield"          "ID"  
			"reader_data_topBC.tStart"           "${startDate}"
			"reader_data_topBC.tEnd"             "${endDate}"
			"reader_data_topBC.tTimestep"        "${tTimestep}"
			"reader_data_topBC.fileNovalue"      "-9999"

			"reader_data_bottomBC.file"             "${bottomBCFileName}"
			"reader_data_bottomBC.idfield"          "ID"  
			"reader_data_bottomBC.tStart"           "${startDate}"
			"reader_data_bottomBC.tEnd"             "${endDate}"
			"reader_data_bottomBC.tTimestep"        "${tTimestep}"
			"reader_data_bottomBC.fileNovalue"      "-9999"
			
			"reader_data_save_dates.file"             "${saveDatesFileName}"
			"reader_data_save_dates.idfield"          "ID"  
			"reader_data_save_dates.tStart"           "${startDate}"
			"reader_data_save_dates.tEnd"             "${endDate}"
			"reader_data_save_dates.tTimestep"        "${tTimestep}"
			"reader_data_save_dates.fileNovalue"      "-9999"
			
			
			"buffer.writeFrequency"                   "${writeFrequency}"

			// folder path for the output files
			"writeNetCDF.fileName" "${outputFileName}"
			// here you can enter a string to describe your simulation
			"writeNetCDF.briefDescritpion"               "WHETGEO-1D ex00."
			"writeNetCDF.writeFrequency"                 "${writeFrequency}"
			"writeNetCDF.timeUnits"                      "Minutes since 01/01/1970 00:00:00 UTC"
			"writeNetCDF.timeZone"                       "UTC"
			"writeNetCDF.fileSizeMax"                    "10000"
			"writeNetCDF.outVariables"                   "{darcyVelocity}"
			"writeNetCDF.pathGrid"		                 "${richardsGridFileName}"
			"writeNetCDF.pathTopBC"		                 "${topBCFileName}"
			"writeNetCDF.pathBottomBC"	                 "${bottomBCFileName}"
			"writeNetCDF.topBC"		                     "${topBCType}"
			"writeNetCDF.bottomBC"	                     "${bottomBCType}"
			"writeNetCDF.swrcModel"                      "${typeClosureEquation}"
			"writeNetCDF.soilHydraulicConductivityModel" "${typeUHCModel}"
			"writeNetCDF.interfaceConductivityModel"     "${interfaceHydraulicConductivityModel}"
			
		}

		connect{


			"readNetCDF.z"                      "solver.z"
			"readNetCDF.spaceDelta"             "solver.spaceDeltaZ"
			"readNetCDF.psiIC"                  "solver.psiIC"
			"readNetCDF.temperature"            "solver.temperature"
			"readNetCDF.controlVolume"          "solver.controlVolume"
			"readNetCDF.Ks"                     "solver.ks"
			"readNetCDF.thetaS"                 "solver.thetaS"
			"readNetCDF.thetaR"                 "solver.thetaR"
			"readNetCDF.par1SWRC"               "solver.par1SWRC"
			"readNetCDF.par2SWRC"               "solver.par2SWRC"
			"readNetCDF.par3SWRC"               "solver.par3SWRC"
			"readNetCDF.par4SWRC"               "solver.par4SWRC"
			"readNetCDF.par5SWRC"               "solver.par5SWRC"
			"readNetCDF.alphaSS"                "solver.alphaSpecificStorage"
			"readNetCDF.betaSS"                 "solver.betaSpecificStorage"
			"readNetCDF.equationStateID"        "solver.inEquationStateID"
			"readNetCDF.parameterID"            "solver.inParameterID"

			"reader_data_topBC.tCurrent"        "solver.inCurrentDate"
			"reader_data_topBC.outData"         "solver.inTopBC"
			"reader_data_bottomBC.outData"      "solver.inBottomBC"
			"reader_data_save_dates.outData"    "solver.inSaveDate"
			
			
			
			// input buffer
			"solver.inCurrentDate"        "buffer.inputDate"
			"solver.doProcessBuffer"      "buffer.doProcessBuffer"
			"solver.outputToBuffer"       "buffer.inputVariable"

			
			// input writeNetCDF
			"reader_data_topBC.doProcess"        "writeNetCDF.doProcess"
			
			"buffer.myVariable"                  "writeNetCDF.variables"
			
			"readNetCDF.eta"                     "writeNetCDF.spatialCoordinate"
			"readNetCDF.etaDual"                 "writeNetCDF.dualSpatialCoordinate"
			"readNetCDF.controlVolume"           "writeNetCDF.controlVolume"
			"readNetCDF.psiIC"                   "writeNetCDF.psiIC"
			"readNetCDF.temperature"             "writeNetCDF.temperature"
			
			
		}
	}

	}

)
